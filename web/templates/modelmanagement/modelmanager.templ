package modelmanagement

import (
	"yourvoice/web/templates/components/table"
	"yourvoice/web/templates/components/sidebar"
	"yourvoice/web/templates/components/checkbox"
	"yourvoice/web/templates/components/label"
	"yourvoice/web/templates/components/button"
	"yourvoice/web/templates/components/icon"
	"yourvoice/web/templates/components/dropdown"
	"yourvoice/web/templates/components/dialog"
	"yourvoice/internal/utils"
	"strconv"
)

type ModelManagerProps struct {
	Title      string
	Headers    []string
	Rows       []RowProps
	ModalProps ModalProps
}

templ ModelManager(props ModelManagerProps) {
	@Modal(props.ModalProps)
	@sidebar.Inset() {
		<div class="flex flex-col h-full">
			<div class="flex gap-4 items-center px-6 h-14">
				@sidebar.Trigger(sidebar.TriggerProps{Target: "sidebar"})
				<span id>{ props.Title }</span>
			</div>
			@sidebar.Separator()
			<div class="flex-1 p-6"></div>
		</div>
	}
	@dialog.Trigger(dialog.TriggerProps{
		For: "modelModal",
	}) {
		@button.Button(button.Props{Attributes: templ.Attributes{"onClick": "openModelModal('" + props.ModalProps.Title + "')"}}) {
			New { props.ModalProps.Title }
		}
	}
	@table.Table() {
		@table.Header() {
			@table.Row() {
				for i, header := range props.Headers {
					if i == 0 {
						@table.Head() {
							<div class="flex gap-2 items-center">
								@modelCheckbox("checkAll", header, templ.JSFuncCall("toggleSelectAll"))
							</div>
						}
					} else {
						@table.Head() {
							{ header }
						}
					}
				}
				@table.Head() {
					@modelDropdown(modelDropdownProps{ID: "dropdownTriggerAll", Disabled: true, DeleteAction: "ajax('', {method: 'DELETE', targets: [...selectedModels].map(id => 'row-' + id), swap: 'remove')"})
				}
			}
		}
		@templ.Fragment("datatable") {
			@table.Body(table.BodyProps{ID: "datatable"}) {
				for _, row := range props.Rows {
					@ModelRow(row)
				}
			}
		}
	}
}

type RowProps struct {
	Model      any
	Cells      []string
	ModalTitle string
}

templ ModelRow(props RowProps) {
	{{ ID := utils.GetModelID(props.Model) }}
	@table.Row(table.RowProps{ID: "row-" + strconv.FormatUint(ID, 10)}) {
		for i, cell := range props.Cells {
			if i == 0 {
				@table.Cell() {
					@modelCheckbox("check-"+strconv.FormatUint(ID, 10), cell, templ.JSFuncCall("toggleSelectModel", strconv.FormatUint(ID, 10)))
				}
			} else {
				@table.Cell() {
					{ cell }
				}
			}
		}
		@table.Cell() {
			@modelDropdown(modelDropdownProps{
				EditAction:   templ.JSFuncCall("openModelModal", props.ModalTitle, props.Model),
				DeleteAction: "ajax('', {method: 'DELETE', target: 'row-" + strconv.FormatUint(ID, 10) + "', swap: 'remove'})",
			})
		}
	}
}

type modelDropdownProps struct {
	ID           string
	Disabled     bool
	EditAction   templ.ComponentScript
	DeleteAction string
}

templ modelDropdown(props modelDropdownProps) {
	@dropdown.Dropdown() {
		@dropdown.Trigger() {
			@button.Button(button.Props{
				ID:       props.ID,
				Size:     button.SizeIcon,
				Variant:  button.VariantGhost,
				Disabled: props.Disabled,
			}) {
				@icon.Ellipsis()
			}
		}
		@dropdown.Content() {
			@dropdown.Group() {
				@dropdown.Item(dropdown.ItemProps{}) {
					<span
						data-tui-dialog-trigger="modelModal"
						data-dialog-instance="modelModal"
						data-tui-dialog-trigger-open="false"
						class="flex items-center group"
						onClick={ props.EditAction }
					>
						@icon.Pencil(icon.Props{Size: 16, Class: "mr-2"})
						Edit
					</span>
				}
				@dropdown.Item(dropdown.ItemProps{Href: "#", Target: "_blank"}) {
					<span class="flex items-center">
						@icon.Copy(icon.Props{Size: 16, Class: "mr-2"})
						Copy
					</span>
				}
				@dropdown.Separator()
				@dropdown.Item(dropdown.ItemProps{Attributes: templ.Attributes{"onClick": props.DeleteAction}}) {
					<span class="flex items-center text-destructive">
						@icon.Delete(icon.Props{Size: 16, Class: "mr-2"})
						Delete
					</span>
				}
			}
		}
	}
}

templ modelCheckbox(ID string, labelText string, onchange templ.ComponentScript) {
	<div class="flex gap-2 items-center">
		@checkbox.Checkbox(checkbox.Props{
			ID:       ID,
			Name:     ID,
			Value:    ID,
			OnChange: onchange,
		})
		@label.Label(label.Props{
			For: ID,
		}) {
			{ labelText }
		}
	</div>
}

templ ModelmanagerScript() {
	<script defer nonce={ templ.GetNonce(ctx) } src="/static/js/modelmanagement/modelmanager.js"></script>
}
