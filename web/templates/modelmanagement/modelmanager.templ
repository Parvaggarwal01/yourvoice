package modelmanagement

import (
	"yourvoice/web/templates/components/table"
	"yourvoice/web/templates/components/sidebar"
	"yourvoice/web/templates/components/checkbox"
	"yourvoice/web/templates/components/label"
	"yourvoice/web/templates/components/button"
	"yourvoice/web/templates/components/icon"
	"yourvoice/web/templates/components/dropdown"
	"reflect"
	"strconv"
)

type ModelManagerProps struct {
	Title   string
	Headers []string
	Rows    []RowProps
}

type RowProps struct {
	Model any
	Cells []string
}

templ ModelManager(props ModelManagerProps) {
	@sidebar.Inset() {
		<div class="flex flex-col h-full">
			<div class="flex gap-4 items-center px-6 h-14">
				@sidebar.Trigger(sidebar.TriggerProps{Target: "sidebar"})
				<span id>{ props.Title }</span>
			</div>
			@sidebar.Separator()
			<div class="flex-1 p-6"></div>
		</div>
	}
	@templ.Fragment("datatable") {
		@table.Table(table.Props{ID: "datatable"}) {
			@table.Header() {
				@table.Row() {
					for i, header := range props.Headers {
						if i == 0 {
							@table.Head() {
								<div class="flex gap-2 items-center">
									@modelCheckbox("checkAll", header, templ.JSFuncCall("toggleSelectAll", "this.checked"))
								</div>
							}
						} else {
							@table.Head() {
								{ header }
							}
						}
					}
					@table.Head() {
						@modelDropdown(modelDropdownProps{ID: "dropdownTriggerAll", Disabled: true})
					}
				}
			}
			@table.Header() {
				for _, row := range props.Rows {
					@table.Row() {
						for i, cell := range row.Cells {
							if i == 0 {
								@table.Cell() {
									{{ ID := "check-" + getModelID(row.Model) }}
									@modelCheckbox(ID, cell, templ.JSFuncCall("toggleSelectModel", getModelID((row.Model))))
								}
							} else {
								@table.Cell() {
									{ cell }
								}
							}
						}
						@table.Cell() {
							@modelDropdown()
						}
					}
				}
			}
		}
	}
}

type modelDropdownProps struct {
	ID       string
	Disabled bool
}

templ modelDropdown(props ...modelDropdownProps) {
	{{
		var p modelDropdownProps
		if len(props) > 0 {
			p = props[0]
		}
	}}
	@dropdown.Dropdown() {
		@dropdown.Trigger() {
			@button.Button(button.Props{
				ID:       p.ID,
				Size:     button.SizeIcon,
				Variant:  button.VariantGhost,
				Disabled: p.Disabled,
			}) {
				@icon.Ellipsis()
			}
		}
		@dropdown.Content() {
			@dropdown.Group() {
				@dropdown.Item(dropdown.ItemProps{Href: "#", Target: "_blank"}) {
					<span class="flex items-center">
						@icon.Pencil(icon.Props{Size: 16, Class: "mr-2"})
						Edit
					</span>
				}
				@dropdown.Item(dropdown.ItemProps{Href: "#", Target: "_blank"}) {
					<span class="flex items-center">
						@icon.Copy(icon.Props{Size: 16, Class: "mr-2"})
						Copy
					</span>
				}
				@dropdown.Separator()
				@dropdown.Item(dropdown.ItemProps{Href: "#", Target: "_blank"}) {
					<span class="flex items-center text-destructive">
						@icon.Delete(icon.Props{Size: 16, Class: "mr-2"})
						Delete
					</span>
				}
			}
		}
	}
}

templ modelCheckbox(ID string, labelText string, onchange templ.ComponentScript) {
	<div class="flex gap-2 items-center">
		@checkbox.Checkbox(checkbox.Props{
			ID:       ID,
			Name:     ID,
			Value:    ID,
			OnChange: onchange,
		})
		@label.Label(label.Props{
			For: ID,
		}) {
			{ labelText }
		}
	</div>
}

func getModelID(model any) string {
	if model == nil {
		return ""
	}

	val := reflect.ValueOf(model)
	if val.Kind() == reflect.Ptr {
		val = val.Elem()
	}

	if val.Kind() != reflect.Struct {
		return ""
	}

	idField := val.FieldByName("ID")
	if !idField.IsValid() {
		return ""
	}

	switch idField.Kind() {
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		return strconv.FormatUint(idField.Uint(), 10)
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		return strconv.FormatInt(idField.Int(), 10)
	case reflect.String:
		return idField.String()
	default:
		return ""
	}
}
