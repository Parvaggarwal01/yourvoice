package components

import (
	"reflect"
	"strconv"
	"yourvoice/internal/utils"
	"yourvoice/web/templates/admin/components/basic"
)

type ModelManagerProps struct {
	Title         string
	SingularTitle string
	Icon          string
	MainAction    templ.Component
	Filters       []basic.InputProps
	BarActions    []*basic.ActionProps
	SearchValue   string
	Headers       []string
	Rows          []RowProps
	RowActions    []templ.Component
	Dialog        DialogProps
	Modal         ModalProps
	Pagination    PaginationProps
}

type PaginationProps struct {
	CurrentPage  int   `json:"CurrentPage"`
	TotalItems   int64 `json:"TotalItems"`
	ItemsPerPage int   `json:"ItemsPerPage"`
}

templ ModelManager(props ModelManagerProps, options [2]bool) {
	<div
		x-data={ templ.JSONString(map[string]any{
		"modal":     props.Modal,
		"dialog":    props.Dialog,
		"pagination": props.Pagination,
		}) }
		x-effect="pagination.RowCount = $refs.tbody.querySelectorAll('tr').length - 1; pagination.TotalPages = Math.floor((pagination.TotalItems + pagination.ItemsPerPage - 1) / pagination.ItemsPerPage)"
		class="p-4 sm:p-6 lg:p-8"
	>
		@Dialog()
		@Modal(props.SingularTitle, props.Modal)
		@basic.Card(basic.CardProps{
			Title:  props.Title,
			Icon:   props.Icon,
			Action: props.MainAction,
		}) {
			<div
				class="space-y-6"
			>
				<!-- Filter Bar -->
				@FilterBar(FilterBarProps{
					Filters:           props.Filters,
					Actions:           props.BarActions,
					SearchValue:       props.SearchValue,
					SearchPlaceholder: props.Title,
				})
				<!-- Data Table -->
				<div class="overflow-hidden rounded-lg border bg-slate-800 border-slate-700">
					<div class="overflow-x-auto">
						<table class="w-full">
							<thead class="border-b bg-slate-700 border-slate-600">
								<tr>
									for _, header := range props.Headers {
										<th class="py-3 px-6 text-xs font-medium tracking-wider text-left uppercase text-slate-300">
											{ header }
										</th>
									}
									if len(props.RowActions) > 0 || options[0] || options[1] {
										<th class="py-3 px-6 text-xs font-medium tracking-wider text-right uppercase text-slate-300">
											Actions
										</th>
									}
								</tr>
							</thead>
							{ children... }
						</table>
					</div>
				</div>
			</div>
		}
	</div>
}

type TBodyProps struct {
	Rows       []RowProps
	RowActions []templ.Component
}

templ TBody(props TBodyProps, options [3]bool) {
	<tbody id="data-table" x-ref="tbody" class="divide-y divide-slate-700">
		if options[2] {
			<tr x-cloak x-show="pagination.TotalItems === 0">
				<td colspan="100%" class="py-6 text-center text-slate-400">No data available</td>
			</tr>
		}
		for _, row := range props.Rows {
			@Row(row, props.RowActions, [2]bool{options[0], options[1]})
		}
	</tbody>
}

type RowProps struct {
	Model any
	Cells []string
}

templ Row(props RowProps, actions []templ.Component, options [2]bool) {
	<tr @ajax:before="confirm('Are you sure?') || $event.preventDefault()" id={ "row-" + getModelID(props.Model) }>
		for _, cell := range props.Cells {
			<td class="py-4 px-6 text-sm whitespace-nowrap text-slate-300">
				{ cell }
			</td>
		}
		if len(actions) > 0 {
			<td class="py-4 px-6 space-x-2 text-sm text-right whitespace-nowrap">
				for _, action := range actions {
					@action
				}
			</td>
		}
		if  options[0] || options[1] {
			<td class="py-4 px-6 space-x-2 text-sm text-right whitespace-nowrap">
				if  options[0] {
					@basic.ActionButton(basic.ActionProps{
						Label: "Edit",
						Style: utils.ActionStyleOutlineSecondary,
						Size:  utils.SizeSmall,
						Attributes: templ.Attributes{
							"x-on:click": "Object.assign(modal, { Open: true, Model: " + utils.GetJSONString(props.Model) + "})",
						},
					})
				}
				if options[1] {
					@basic.ActionButton(basic.ActionProps{
						Label: "Delete",
						Style: utils.ActionStyleOutlineDanger,
						Size:  utils.SizeSmall,
						Attributes: templ.Attributes{
							"x-on:click":    "$ajax('', {method: 'delete', target: 'row-" + getModelID(props.Model) + "', body: {id: " + getModelID(props.Model) + "}})",
							"@ajax:success": "pagination.TotalItems = Math.max(0, pagination.TotalItems - 1)",
							"@ajax:error":   "Object.assign(dialog, { Active: true, Type: '" + utils.DialogTypeAcknowledge + "', Style: '" + utils.ActionStyleDanger + "', Title: 'Error', Message: 'Failed to delete " + getModelName(props.Model) + ". Reason: ' + ($event.detail.raw || 'Unknown Error')})",
						},
					})
				}
			</td>
		}
	</tr>
}

func getModelID(model any) string {
	if model == nil {
		return ""
	}

	val := reflect.ValueOf(model)
	if val.Kind() == reflect.Ptr {
		val = val.Elem()
	}

	if val.Kind() != reflect.Struct {
		return ""
	}

	idField := val.FieldByName("ID")
	if !idField.IsValid() {
		return ""
	}

	switch idField.Kind() {
	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64:
		return strconv.FormatUint(idField.Uint(), 10)
	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
		return strconv.FormatInt(idField.Int(), 10)
	case reflect.String:
		return idField.String()
	default:
		return ""
	}
}

func getModelName(model any) string {
	if model == nil {
		return ""
	}

	val := reflect.ValueOf(model)
	if val.Kind() == reflect.Ptr {
		val = val.Elem()
	}

	if val.Kind() != reflect.Struct {
		return ""
	}

	nameField := val.FieldByName("Name")
	if !nameField.IsValid() || nameField.Kind() != reflect.String {
		return ""
	}

	return nameField.String()
}
