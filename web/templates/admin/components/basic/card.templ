package basic

import (
	"yourvoice/internal/utils"
)

type CardProps struct {
	Title     string
	Icon      string
	Indicator *Indicator
	Action    templ.Component
	Size      string // Use size constants
	Classes   string
}

type StatCardProps struct {
	Title    string
	Value    string
	Icon     string
	Subtitle string
	Trend    *Trend
}

type IconProps struct {
	Icon string
	Size string // Use size constants
}

// Main Card Component
templ Card(props CardProps) {
	<div
		class={
			"bg-slate-800 rounded-lg shadow-lg border border-slate-700 text-white overflow-hidden",
			templ.KV("w-full", props.Size == utils.SizeFull),
			props.Classes,
		}
	>
		if hasHeader(props) {
			<div class="flex items-center justify-between px-6 py-4 bg-slate-700 border-b border-slate-600">
				<div class="flex items-center space-x-3">
					if props.Icon != "" {
						<span class="text-xl">{ props.Icon }</span>
					}
					if props.Title != "" {
						<h3 class="text-lg font-semibold text-slate-100">{ props.Title }</h3>
					}
				</div>
				<div class="flex items-center space-x-3">
					if props.Indicator != nil {
						@StatusBadge(*props.Indicator)
					}
					if props.Action != nil {
						@props.Action
					}
				</div>
			</div>
		}
		<div
			class={
				templ.KV("p-4", props.Size == utils.SizeSmall),
				templ.KV("p-6", props.Size == "" || props.Size == utils.SizeMedium),
				templ.KV("p-8", props.Size == utils.SizeLarge),
			}
		>
			{ children... }
		</div>
	</div>
}

// Simplified Stats Card
templ StatCard(props StatCardProps) {
	<div class="bg-slate-700 rounded-lg shadow-lg p-3 sm:p-4 md:p-6 border border-slate-600">
		<div class="flex items-center space-x-3">
			@Icon(IconProps{
				Icon: props.Icon,
				Size: utils.SizeLarge,
			})
			<div class="flex-1 min-w-0">
				<div class="flex items-center flex-wrap gap-1 sm:gap-2">
					<h3 class="text-lg sm:text-xl md:text-2xl font-bold text-slate-100 truncate">{ props.Value }</h3>
					if props.Trend != nil {
						@TrendBadge(*props.Trend)
					}
				</div>
				<p class="text-xs sm:text-sm text-slate-300 truncate">{ props.Title }</p>
				if props.Subtitle != "" {
					<p class="text-xs text-slate-400 mt-1 truncate">{ props.Subtitle }</p>
				}
			</div>
		</div>
	</div>
}

// Reusable Components
templ Icon(props IconProps) {
	<div class="flex-shrink-0">
		<div
			class={
				"bg-slate-900 rounded-lg flex items-center justify-center",
				getIconSizeClasses(props.Size),
			}
		>
			<span
				class={ getIconTextSizeClasses(props.Size), }
			>{ props.Icon }</span>
		</div>
	</div>
}

// Helper Functions
func hasHeader(props CardProps) bool {
	return props.Title != "" || props.Indicator != nil || props.Action != nil
}

func getIconSizeClasses(size string) string {
	switch size {
	case utils.SizeSmall:
		return "w-10 h-10"
	case utils.SizeMedium, "":
		return "w-12 h-12"
	case utils.SizeLarge:
		return "w-16 h-16"
	case utils.SizeFull:
		return "w-20 h-20"
	default:
		return "w-12 h-12"
	}
}

func getIconTextSizeClasses(size string) string {
	switch size {
	case utils.SizeSmall:
		return "text-lg"
	case utils.SizeMedium, "":
		return "text-2xl"
	case utils.SizeLarge:
		return "text-3xl"
	case utils.SizeFull:
		return "text-5xl"
	default:
		return "text-2xl"
	}
}
